----------------------------------------------------------------------------------
/* Write a query that returns the number of unique users per client per month */

select client_id, count(distinct user_id), 
            EXTRACT (MONTH from time_id) as month
from fact_events
group by client_id, month

----------------------------------------------------------------------------------
/* Return a list of users with status free who didn’t make any calls in Apr 2020. */

SELECT 
    users.user_id, 
    users.status, 
    COUNT(filter_calls.user_id) AS call_count
FROM rc_users AS users
LEFT JOIN (
    SELECT 
        user_id, 
        EXTRACT(MONTH FROM date) AS month
    FROM rc_calls
    WHERE EXTRACT(MONTH FROM date) = 4
) AS filter_calls
ON users.user_id = filter_calls.user_id
GROUP BY users.user_id, users.status
HAVING users.status = 'free' AND COUNT(filter_calls.user_id) = 0;
~~~~~~~
SELECT 
    users.user_id, 
    users.status
FROM rc_users AS users
LEFT JOIN rc_calls AS calls
    ON users.user_id = calls.user_id 
    AND EXTRACT(MONTH FROM calls.date) = 4 
    AND EXTRACT(YEAR FROM calls.date) = 2020
WHERE users.status = 'free'
    AND calls.call_id IS NULL;
----------------------------------------------------------------------------------
/* Find the most profitable company from the financial sector. Output the result along with the continent. */

SELECT company, continent
FROM forbes_global_2010_2014
WHERE profits = (SELECT
            MAX(profits) FROM forbes_global_2010_2014
                WHERE sector = 'Financials');
----------------------------------------------------------------------------------
/*You have been asked to find the 5 most lucrative products in terms of total revenue for the first half of 2022 
(from January to June inclusive). Output their IDs and the total revenue. */

select product_id, sum(cost_in_dollars * units_sold) as revenue
from online_orders
where 
    EXTRACT(YEAR from date) = '2022' AND
    EXTRACT(Month from date)  < 7
group by product_id
ORDER by revenue DESC
limit 5
----------------------------------------------------------------------------------
/*Classify each business as either a restaurant, cafe, school, or other. */

select distinct business_name,
    CASE WHEN
        lower(business_name) ' '%restaurant%' THEN 'restaurant'
    WHEN
        lower(business_name) like '%cafe%' OR
        lower(business_name) like '%café%' OR
        lower(business_name) like '%coffee%' THEN 'cafe '
    WHEN
        lower(business_name) like '%school%' THEN 'school'
    ELSE 
        'other'
    END AS classification
FROM sf_restaurant_health_violations
----------------------------------------------------------------------------------
/*Calculates the difference between the highest salaries in the marketing and engineering departments. Output just the absolute difference in salaries. */

SELECT
    ABS(
    (SELECT MAX(emp.salary)
        FROM db_employee emp
        JOIN db_dept dept ON emp.department_id = dept.id
         WHERE dept.department = 'engineering')
         -
    (SELECT MAX(emp.salary)
        FROM db_employee emp
        JOIN db_dept dept ON emp.department_id = dept.id
        WHERE dept.department = 'marketing')
    )
	
Second solution:
SELECT 
    (MAX(CASE WHEN db_dept.department = 'marketing' THEN db_employee.salary ELSE 0 END) - 
    MAX(CASE WHEN db_dept.department = 'engineering' THEN db_employee.salary ELSE 0 END)) AS diff
FROM db_dept 
JOIN db_employee 
ON db_dept.id = db_employee.department_id;	
----------------------------------------------------------------------------------
/* return the absolute difference between the max salaries in the engineering department and marketing department */

SELECT
    ABS(
    (SELECT MAX(emp.salary)
        FROM db_employee emp
        JOIN db_dept dept ON emp.department_id = dept.id
         WHERE dept.department = 'engineering')
         -
    (SELECT MAX(emp.salary)
        FROM db_employee emp
        JOIN db_dept dept ON emp.department_id = dept.id
        WHERE dept.department = 'marketing')
    )
----------------------------------------------------------------------------------
/*Count the total number of violations that occurred at 'Roxanne Cafe' for each year,
 based on the inspection date. Output the year and the corresponding number of violations in ascending order of the year. */

SELECT count(*), EXTRACT(YEAR from inspection_date) as year
FROM sf_restaurant_health_violations
WHERE business_name LIKE '%Roxanne Cafe' 
    AND violation_id IS NOT NULL
Group by business_name, EXTRACT(YEAR from inspection_date)
ORDER BY EXTRACT(YEAR from inspection_date) 
----------------------------------------------------------------------------------
/*Find the Olympics with the highest number of athletes. */

SELECT count(distinct name) as athletes, games
FROM olympics_athletes_events
GROUP BY games
ORDER BY athletes DESC
limit 1

~~~~~~~~~
WITH RankedData as (
    SELECT COUNT(distinct name) as athletes, games,
    RANK() OVER (ORDER BY COUNT(distinct name) DESC ) as rank
    FROM olympics_athletes_events
    GROUP BY games
)

SELECT games, athletes
from RankedData
where rank = 1;
----------------------------------------------------------------------------------
SELECT 
    employee_id, 
    department_id, 
    COUNT(*) OVER (PARTITION BY department_id) AS dept_count
FROM 
    employees;
----------------------------------------------------------------------------------
/* get name, age, department, salary, and average salary */

SELECT Name, Age, Department, Salary, 
 AVG(Salary) OVER( PARTITION BY Department) AS Avg_Salary
 FROM employee
----------------------------------------------------------------------------------
/*Find the processed rate of tickets for each type. The processed rate is defined as 
the number of processed tickets divided by the total number of tickets for that type. 
Round this result to two decimal places. */
 
SELECT 
    type, 
    AVG(CASE WHEN processed = TRUE THEN 1 ELSE 0 END) 
FROM facebook_complaints
GROUP BY type;
----------------------------------------------------------------------------------
/* simplified version of a CTE */
WITH TopSalaries AS (
    SELECT employee_id, name, salary
    FROM employees
    WHERE salary > 100000
)
SELECT * FROM TopSalaries;

----------------------------------------------------------------------------------
/8Find the customer who has placed the highest number of orders. 
Output the id of the customer along with the corresponding number of orders. */

SELECT o.cust_id, count(*)
FROM orders as o

LEFT JOIN
	customers as c
	ON c.id = o.cust_id
	
GROUP BY o.cust_id
ORDER BY COUNT(*) DESC
LIMIT 1

~~~~~~~~~~~~~~ using CTE and a subquery ~~~~~~~~~~~~~~~~~~~~~
WITH cte as (SELECT o.cust_id, count(*) as num
FROM orders as o
LEFT JOIN
customers as c
ON c.id = o.cust_id
GROUP BY o.cust_id
)

SELECT cust_id, num
FROM CTE
WHERE num = (SELECT MAX(num) from CTE)
----------------------------------------------------------------------------------
/* We want to identify the most suspicious claims in each state.
 We'll consider the top 5 percentile of claims with the highest fraud scores in each state as potentially fraudulent. */

WITH percentile as(
SELECT state,
PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY fraud_score) AS percentile_95
FROM fraud_score 
GROUP BY state)

SELECT f.policy_num, f.state, f.claim_cost, f.fraud_score
FROM fraud_score as f
LEFT JOIN
percentile as p
ON f.state = p.state
WHERE f.fraud_score >= p.percentile_95
----------------------------------------------------------------------------------
/*Calculate the total revenue from each customer in March 2019. Include only customers who were active in March 2019.
Output the revenue along with the customer id and sort the results based on the revenue in descending order. */

SELECT cust_id, SUM(total_order_cost) as total_revenue
FROM orders
where EXTRACT(MONTH from order_date) = 3 AND
      EXTRACT(YEAR from order_date) = 2019
Group By cust_id
ORDER BY total_revenue DESC


~~~~~~~~~~ USING CTE ~~~~~~~~~~~~~~~~

WITH cte as (
SELECT cust_id, SUM(total_order_cost) as total_revenue, 
        EXTRACT(MONTH from order_date) as month,
        EXTRACT(YEAR from order_date) as year
FROM orders
GROUP BY cust_id, year, month
)

SELECT cust_id, total_revenue
FROM cte
WHERE month = 3 AND year = 2019
ORDER BY total_revenue DESC


~~~~~~~~~~ USING HAVING ~~~~~~~~~~~~~
/*have to also use a CTE with having as need the month and year in the group by, so they must also be in the select

WITH cte1 as(select cust_id, SUM(total_order_cost) as total_revenue, 
        EXTRACT(MONTH from order_date) as month,
        EXTRACT(YEAR from order_date) as year
from orders
Group By cust_id, year, month
HAVING EXTRACT(YEAR from order_date) = 2019 and 
        EXTRACT(MONTH from order_date) = 3
ORDER BY total_revenue DESC)

SELECT cust_id, total_revenue
FROM cte1
----------------------------------------------------------------------------------
/*Find order details made by Jill and Eva.
Consider the Jill and Eva as first names of customers.
Output the order date, details and cost along with the first name.
Order records based on the customer id in ascending order */

SELECT o.order_date, o.order_details, o.total_order_cost,
        c.first_name
FROM customers as c 
JOIN
Orders as o
ON c.id = o.cust_id
where c.first_name like '%Eva%' OR
      c.first_name like '%Jill%'
ORDER BY o.cust_id ASC


~~~~~~~~~~~ using a subquery with the inner join to only pull in rows with the correct names ~~~~~~~~~~~~~~~~~~~

SELECT first_name, order_date, order_details, total_order_cost
FROM orders
INNER JOIN (select *
            from customers
            WHERE first_name IN ('Jill', 'Eva')) AS c
ON c.id = orders.cust_id
ORDER BY cust_id 
----------------------------------------------------------------------------------
/*Find the percentage of shipable orders.
Consider an order is shipable if the customer's address is known. */

WITH cte as (
    SELECT c.address, c.id
    FROM orders as o
    JOIN
    customers as C
    ON o.cust_id = c.id
)
SELECT 
AVG(CASE WHEN address IS NOT NULL THEN 1 ELSE 0 END) *100 AS percent_shipable
FROM CTE

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SELECT 
    AVG(
        CASE WHEN cust_id IN (select id FROM customers WHERE address IS NOT NULL) THEN 1
            ELSE 0 END) * 100 AS pct_shipable
FROM orders;
----------------------------------------------------------------------------------
/* For each video, find how many unique users flagged it. A unique user can be 
identified using the combination of their first name and last name. 
Do not consider rows in which there is no flag ID. */

SELECT video_id, COUNT(DISTINCT CONCAT(user_firstname, user_lastname))
FROM user_flags
WHERE flag_id IS NOT NULL 
GROUP BY video_id

----------------------------------------------------------------------------------
WITH cte AS (
    SELECT id, PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY sat_writing) as percentile
    FROM sat_scores
)

SELECT *
FROM CTE
----------------------------------------------------------------------------------
#Write a query to identify supervisors who have at least five direct reports.

WITH CTE as (
  SELECT supervisorid, COUNT(supervisorid) as count_supervisor
  FROM TeamMember
  GROUP BY supervisorid
  HAVING COUNT(supervisorid) > 4
)

SELECT t.full_name as supervisor_name
FROM CTE as c
LEFT JOIN TeamMember as t
ON c.supervisorid = t.member_id
)
----------------------------------------------------------------------------------
#Find the average number of bathrooms and bedrooms for each city’s property types. 
#Output the result along with the city name and the property type.

SELECT city, property_type, 
        AVG(bathrooms) as n_bathrooms_avg, 
        AVG(bedrooms) as n_bedrooms_avg
FROM airbnb_search_details
GROUP BY city, property_type
----------------------------------------------------------------------------------
#Find the number of employees working in the Admin department that joined in April or later.

select COUNT(*)
FROM worker 
WHERE department = 'Admin' and 
      EXTRACT(MONTH from joining_date) > 3
----------------------------------------------------------------------------------
#Find the details of each customer regardless of whether the customer made an order. 
#Output the customer's first name, last name, and the city along with the order details.
#Sort records based on the customer's first name and the order details in ascending order.

select c.first_name, c.last_name, c.city, o.order_details
FROM customers as c

LEFT JOIN
orders as o

ON c.id = o.cust_id
----------------------------------------------------------------------------------
#Find how many reviews exist for each review score given to 'Hotel Arena'. 
#Output the hotel name ('Hotel Arena'), each review score, 
#and the number of reviews for that score. Ensure the results only include 'Hotel Arena.'

SELECT hotel_name,  reviewer_score, count(reviewer_score)
FROM hotel_reviews
WHERE hotel_name = 'Hotel Arena'
GROUP BY hotel_name, reviewer_score
----------------------------------------------------------------------------------
#Find all Lyft drivers who earn either equal to or less than 30k USD or equal to or more than 70k USD.
#Output all details related to retrieved records.

SELECT index, start_date, end_date, yearly_salary 
FROM lyft_drivers
WHERE yearly_salary <= 30000 OR yearly_salary >= 70000
----------------------------------------------------------------------------------
#Find the base pay for Police Captains.
#Output the employee name along with the corresponding base pay.

SELECT employeename, basepay
FROM sf_public_salaries
where jobtitle like '%CAPTAIN%'
----------------------------------------------------------------------------------
#Count the number of user events performed by MacBookPro users.
#Output the result along with the event name.
#Sort the result based on the event count in the descending order.

SELECT event_name, count(event_name) as event_count
FROM playbook_events
WHERE device like '%macbook pro%'
GROUP BY event_name
ORDER BY event_count DESC
----------------------------------------------------------------------------------
#Find the top 10 ranked songs in 2010. Output the rank, group name, and song name, 
#but do not show the same song twice. Sort the result based on the rank in ascending order.

SELECT year_rank, group_name, song_name
FROM billboard_top_100_year_end
WHERE year_rank < 11 AND year = 2010
group by year_rank, group_name, song_name
ORDER BY year_rank ASC
----------------------------------------------------------------------------------
#Select the most popular client_id based on a count of the number of users who have at 
#least 50% of their events from the following list: 'video call received', 'video call sent', 
#'voice call received', 'voice call sent'.

WITH CTE as (SELECT client_id ,
avg(CASE WHEN event_type like '%video call received%' OR
          event_type like '%video call sent%' OR
          event_type like '%voice call received%' OR
          event_type like '%voice call sent%' 
          THEN 1
          ELSE 0
          END) AS flag
FROM fact_events
GROUP BY client_id )

SELECT client_id
FROM CTE
WHERE flag = (SELECT MAX(flag)
              FROM CTE)

----------------------------------------------------------------------------------
#We have a table with employees and their salaries, however, some of the records are old and contain 
#outdated salary information. Find the current salary of each employee assuming that salaries increase 
#each year. Output their id, first name, last name, department ID, and current salary. 
#Order your list by employee ID in ascending order.

SELECT id, first_name, last_name, department_id, MAX(salary) 
FROM  ms_employee_salary
GROUP BY id, first_name, last_name, department_id
ORDER BY id ASC

----------------------------------------------------------------------------------
#You have been asked to find the 5 most lucrative products in terms of total revenue 
#for the first half of 2022 (from January to June inclusive).
#Output their IDs and the total revenue.

SELECT product_id, SUM(cost_in_dollars * units_sold) as revenue
FROM online_orders
WHERE EXTRACT(MONTH from date_sold) < 7 AND
      EXTRACT(YEAR from date_sold) = 2022
GROUP BY product_id
ORDER BY revenue DESC
LIMIT 5
----------------------------------------------------------------------------------
WITH cte AS (
  SELECT product_id,
         SUM(cost_in_dollars * units_sold) AS revenue,
         RANK() OVER (
           ORDER BY SUM(cost_in_dollars * units_sold) DESC
         ) AS rnk
  FROM online_orders
  WHERE EXTRACT(MONTH FROM date_sold) BETWEEN 1 AND 6
  GROUP BY product_id
)
SELECT product_id,
       revenue
FROM cte
WHERE rnk <= 5;
----------------------------------------------------------------------------------
#Find the customer who has placed the highest number of orders. 
#Output the id of the customer along with the corresponding number of orders.

WITH CTE as (
    SELECT cust_id, COUNT(*),
    RANK() OVER( ORDER BY COUNT(*) DESC) as rnk
    FROM orders
    GROUP BY cust_id
)

SELECT cust_id as id, count as total_orders
FROM CTE
where rnk = 1
----------------------------------------------------------------------------------
#Make a report showing the number of survivors and non-survivors by passenger class. 

SELECT survived,
    SUM(CASE WHEN pclass = 1 THEN 1 ELSE 0 END) as first_class,
    SUM(CASE WHEN pclass = 2 THEN 1 ELSE 0 END) as second_class,
    SUM(CASE WHEN pclass = 3 THEN 1 ELSE 0 END) as third_class
FROM titanic
GROUP BY survived
----------------------------------------------------------------------------------
#Find the second highest salary of employees.

WITH CTE as (
    SELECT salary,
    RANK() OVER(ORDER BY salary DESC) as rnk
    FROM employee
)

SELECT salary
FROM CTE
WHERE rnk = 2

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If you want the second row

select 
    salary
from employee
order by salary DESC
limit 1 offset 1;

----------------------------------------------------------------------------------
#Find employees who are earning more than their managers. 
#Output the employee's first name along with the corresponding salary.

WITH CTE as(
    SELECT e.first_name, e.salary as emp_sal, manager.salary as man_salary
    FROM employee as e
    
    LEFT JOIN
    employee as manager
    ON e.manager_id = manager.id
    )
    
SELECT first_name, emp_sal as salary
FROM CTE
WHERE emp_sal > man_salary
----------------------------------------------------------------------------------
#Find the employee with the highest salary per department.
#Output the department name, employee's first name along with the corresponding salary.

WITH CTE as (
    SELECT department, first_name, salary,
    RANK() OVER(PARTITION BY department ORDER BY salary DESC) as rnk
    from employee
)

SELECT department, first_name, salary
FROM CTE
WHERE rnk = 1
----------------------------------------------------------------------------------
#Identify the employee(s) working under manager manager_id=13 who have achieved the 
#highest target. Return each such employee’s first name alongside the target value.

SELECT first_name, target
FROM salesforce_employees
WHERE manager_id = 13 and target = (
    SELECT MAX(target)
    FROM salesforce_employees
    WHERE manager_id = 13
    GROUP BY manager_id)
----------------------------------------------------------------------------------
#Find the email activity rank for each user. Email activity rank is defined by the 
#total number of emails sent. The user with the highest number of emails sent will have a rank of 1, 
#and so on. Output the user, total emails, and their activity rank.
#	Order records first by the total emails in descending order.
#	Then, sort users with the same number of emails in alphabetical order by their username.
#	In your rankings, return a unique value (i.e., a unique rank) even if multiple users have the same number of emails.

SELECT from_user, COUNT(*),
        RANK() OVER (ORDER BY COUNT(*) DESC,from_user) as row_number
        FROM google_gmail_emails
        GROUP BY from_user
----------------------------------------------------------------------------------
#Find the job titles of the employees with the highest salary. 
#If multiple employees have the same highest salary, include the job titles for all such employees.

~~~~~~~ using a subquery ~~~~~~~~~~~

select t.worker_title 
FROM worker as w
LEFT JOIN
title as t
on w.worker_id = t.worker_ref_id
WHERE w.salary = (
        SELECT MAX(salary)
        FROM worker)
		
~~~~~~~ using a window function ~~~~~~~~~~~	

WITH CTE as (
    SELECT worker_id, worker_title,
    DENSE_RANK() OVER(ORDER BY salary DESC) as rnk
    FROM worker as w
    LEFT JOIN
    title as t
    ON w.worker_id = t.worker_ref_id
    )
    
SELECT worker_title
FROM CTE
WHERE rnk = 1
----------------------------------------------------------------------------------
WITH page_load AS (
    SELECT user_id,  MIN(timestamp) as start1, 
            EXTRACT(DAY FROM timestamp) as day
    FROM facebook_web_log
    WHERE action like '%page_load%'
    GROUP BY user_id, EXTRACT(DAY FROM timestamp)
),
page_exit AS (
    SELECT user_id, MAX(timestamp) as end1, 
            EXTRACT(DAY FROM timestamp) as day
    FROM facebook_web_log
    WHERE action like '%page_exit%'
    GROUP BY user_id, EXTRACT(DAY FROM timestamp)
),
joined AS (SELECT *
FROM page_load as load
INNER JOIN
page_exit as exit
ON load.user_id = exit.user_id AND 
   load.day = exit.day
 )
 
SELECT user_id, AVG(end1 - start1) as duration
FROM joined
GROUP BY user_id
----------------------------------------------------------------------------------
#Find the customer with the highest daily total order cost between 2019-02-01 to 2019-05-01. 
#If customer had more than one order on a certain day, sum the order costs on daily basis. 
#Output customer's first name, total cost of their items, and the date.

~~~~~~~~~~~~~ using a CTE and then subquery ~~~~~~~~~~~~~~~~~~
WITH CTE as(
SELECT c.first_name, o.order_date, SUM(total_order_cost) as max_cost
FROM customers as c

LEFT JOIN
orders AS o
ON c.id = o.cust_id

WHERE EXTRACT(MONTH FROM o.order_date) < 6 AND
      EXTRACT(MONTH FROM o.order_date) > 1
GROUP BY c.first_name, o.order_date
)

SELECT first_name, order_date, max_cost
FROM CTE
WHERE max_cost = (SELECT MAX(max_cost)
                  FROM CTE)
				  
~~~~~~~~~~~~~~~~~~ using window function ~~~~~~~~~~~~~
WITH CTE as(
SELECT c.first_name, o.order_date, SUM(total_order_cost) as max_cost,
RANK() OVER(ORDER BY SUM(total_order_cost) DESC) as rnk
FROM customers as c

LEFT JOIN
orders AS o
ON c.id = o.cust_id

WHERE EXTRACT(MONTH FROM o.order_date) < 6 AND
      EXTRACT(MONTH FROM o.order_date) > 1
GROUP BY c.first_name, o.order_date
)

SELECT first_name, order_date, max_cost
FROM CTE
WHERE rnk = 1

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------



mySQL and postgress exeprience
schema is a group of tables

Used python to write the data to postgres
and use python to read from database
Postgres:
1) login to pgAdmin
2) create a schema
3) import csv files into python
4) use database connector to export the dataframe from python to Postgres
5) use python to connect to the database, and then you can read data from the database
----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

Master of Science in Analytics from NC State, with a focus on applied data science. Coursework includes statistical and machine learning modeling, proficiency in programming languages such as Python, SQL, and R, and the ability to transform complex data insights into actionable recommendations for non-technical audiences.


